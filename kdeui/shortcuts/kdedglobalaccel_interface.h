/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp org.kde.KdedGlobalAccel.xml -p kdedglobalaccel_interface
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech ASA. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef KDEDGLOBALACCEL_INTERFACE_H_1218204977
#define KDEDGLOBALACCEL_INTERFACE_H_1218204977

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

Q_DECLARE_METATYPE(QList<int>)
Q_DECLARE_METATYPE(QList<QStringList>)

/*
 * Proxy class for interface org.kde.KdedGlobalAccel
 */
class OrgKdeKdedGlobalAccelInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.KdedGlobalAccel"; }

public:
    OrgKdeKdedGlobalAccelInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgKdeKdedGlobalAccelInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<QStringList> action(int key)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(key);
        return callWithArgumentList(QDBus::Block, QLatin1String("action"), argumentList);
    }

    inline QDBusReply<QList<int> > allKeys()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("allKeys"), argumentList);
    }

    inline QDBusReply<QStringList> allKeysAsString()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("allKeysAsString"), argumentList);
    }

    inline QDBusReply<QList<QStringList> > allMainComponents()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("allMainComponents"), argumentList);
    }

    inline QDBusReply<QList<QStringList> > allActionsForComponent(const QStringList &actionId)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(actionId);
        return callWithArgumentList(QDBus::Block, QLatin1String("allActionsForComponent"), argumentList);
    }

    inline QDBusReply<QList<int> > defaultShortcut(const QStringList &actionId)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(actionId);
        return callWithArgumentList(QDBus::Block, QLatin1String("defaultShortcut"), argumentList);
    }

    inline void doRegister(const QStringList &actionId)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(actionId);
        callWithArgumentList(QDBus::Block, QLatin1String("doRegister"), argumentList);
    }

    inline void setForeignShortcut(const QStringList &actionId, const QList<int> &keys)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(actionId) << qVariantFromValue(keys);
        callWithArgumentList(QDBus::Block, QLatin1String("setForeignShortcut"), argumentList);
    }

    inline void setInactive(const QStringList &actionId)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(actionId);
        callWithArgumentList(QDBus::Block, QLatin1String("setInactive"), argumentList);
    }

    inline QDBusReply<QList<int> > setShortcut(const QStringList &actionId, const QList<int> &keys, uint flags)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(actionId) << qVariantFromValue(keys) << qVariantFromValue(flags);
        return callWithArgumentList(QDBus::Block, QLatin1String("setShortcut"), argumentList);
    }

    inline QDBusReply<QList<int> > shortcut(const QStringList &actionId)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(actionId);
        return callWithArgumentList(QDBus::Block, QLatin1String("shortcut"), argumentList);
    }

    inline void unRegister(const QStringList &actionId)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(actionId);
        callWithArgumentList(QDBus::Block, QLatin1String("unRegister"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void invokeAction(const QStringList &actionId, qlonglong timestamp);
    void yourShortcutGotChanged(const QStringList &action, const QList<int> &newShortcut);
};

namespace org {
  namespace kde {
    typedef ::OrgKdeKdedGlobalAccelInterface KdedGlobalAccelInterface;
  }
}
#endif
