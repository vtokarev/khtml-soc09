// This file is generated by kconfig_compiler from test_signal.kcfg.
// All changes you do to this file will be lost.

#include "test_signal.h"

#include <kstaticdeleter.h>

TestSignal *TestSignal::mSelf = 0;
static KStaticDeleter<TestSignal> staticTestSignalDeleter;

TestSignal *TestSignal::self()
{
  if ( !mSelf ) {
    staticTestSignalDeleter.setObject( mSelf, new TestSignal() );
    mSelf->readConfig();
  }

  return mSelf;
}

TestSignal::TestSignal(  )
  : KConfigSkeleton( QString::fromLatin1( "kconfig_compiler_test_rc" ) )
{
  mSelf = this;
  setCurrentGroup( QString::fromLatin1( "Appearance" ) );

  KConfigSkeleton::ItemString  *itemEmoticonTheme;
  itemEmoticonTheme = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "emoticonTheme" ), mEmoticonTheme, QString::fromLatin1( "Default" ) );
  addItem( itemEmoticonTheme, QString::fromLatin1( "emoticonTheme" ) );
  KConfigSkeleton::ItemBool  *itemUseEmoticon;
  itemUseEmoticon = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "useEmoticon" ), mUseEmoticon, true );
  addItem( itemUseEmoticon, QString::fromLatin1( "useEmoticon" ) );
  KConfigSkeleton::ItemBool  *itemEmoticonRequireSpace;
  itemEmoticonRequireSpace = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "emoticonRequireSpace" ), mEmoticonRequireSpace, true );
  addItem( itemEmoticonRequireSpace, QString::fromLatin1( "emoticonRequireSpace" ) );
  KConfigSkeleton::ItemString  *itemStylePath;
  itemStylePath = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "stylePath" ), mStylePath );
  addItem( itemStylePath, QString::fromLatin1( "stylePath" ) );
  KConfigSkeleton::ItemString  *itemStyleCSSVariant;
  itemStyleCSSVariant = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "styleVariant" ), mStyleCSSVariant );
  addItem( itemStyleCSSVariant, QString::fromLatin1( "StyleCSSVariant" ) );
}

TestSignal::~TestSignal()
{
  if ( mSelf == this )
    staticTestSignalDeleter.setObject( mSelf, 0, false );
}

void TestSignal::usrWriteConfig()
{
  if ( mSettingsChanged & signalEmoticonSettingsChanged ) 
    emit emoticonSettingsChanged();

  if ( mSettingsChanged & signalStyleChanged ) 
    emit styleChanged(mStylePath, mStyleCSSVariant);

  mSettingsChanged = 0;
}

#include "test_signal.moc"

