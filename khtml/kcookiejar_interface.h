/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -i kcookiejar_include.h -m -p kcookiejar_interface ../kioslave/http/kcookiejar/org.kde.KCookieServer.xml
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech ASA. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef KCOOKIEJAR_INTERFACE_H_1193243623
#define KCOOKIEJAR_INTERFACE_H_1193243623

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "kcookiejar_include.h"

/*
 * Proxy class for interface org.kde.KCookieServer
 */
class OrgKdeKCookieServerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.KCookieServer"; }

public:
    OrgKdeKCookieServerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgKdeKCookieServerInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<void> addCookies(const QString &url, const QByteArray &cookieHeader, qlonglong windowId)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(url) << qVariantFromValue(cookieHeader) << qVariantFromValue(windowId);
        return callWithArgumentList(QDBus::Block, QLatin1String("addCookies"), argumentList);
    }

    inline QDBusReply<void> addDOMCookies(const QString &url, const QByteArray &cookieHeader, qlonglong windowId)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(url) << qVariantFromValue(cookieHeader) << qVariantFromValue(windowId);
        return callWithArgumentList(QDBus::Block, QLatin1String("addDOMCookies"), argumentList);
    }

    inline QDBusReply<void> deleteAllCookies()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("deleteAllCookies"), argumentList);
    }

    inline QDBusReply<void> deleteCookie(const QString &domain, const QString &fqdn, const QString &path, const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(domain) << qVariantFromValue(fqdn) << qVariantFromValue(path) << qVariantFromValue(name);
        return callWithArgumentList(QDBus::Block, QLatin1String("deleteCookie"), argumentList);
    }

    inline QDBusReply<void> deleteCookiesFromDomain(const QString &domain)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(domain);
        return callWithArgumentList(QDBus::Block, QLatin1String("deleteCookiesFromDomain"), argumentList);
    }

    inline QDBusReply<void> deleteSessionCookies(qlonglong windowId)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(windowId);
        return callWithArgumentList(QDBus::Block, QLatin1String("deleteSessionCookies"), argumentList);
    }

    inline QDBusReply<void> deleteSessionCookiesFor(const QString &fqdn, qlonglong windowId)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(fqdn) << qVariantFromValue(windowId);
        return callWithArgumentList(QDBus::Block, QLatin1String("deleteSessionCookiesFor"), argumentList);
    }

    inline QDBusReply<QStringList> findCookies(const QList<int> &fields, const QString &domain, const QString &fqdn, const QString &path, const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(fields) << qVariantFromValue(domain) << qVariantFromValue(fqdn) << qVariantFromValue(path) << qVariantFromValue(name);
        return callWithArgumentList(QDBus::Block, QLatin1String("findCookies"), argumentList);
    }

    inline QDBusReply<QString> findCookies(const QString &url, qlonglong windowId)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(url) << qVariantFromValue(windowId);
        return callWithArgumentList(QDBus::Block, QLatin1String("findCookies"), argumentList);
    }

    inline QDBusReply<QString> findDOMCookies(const QString &url, qlonglong windowId)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(url) << qVariantFromValue(windowId);
        return callWithArgumentList(QDBus::Block, QLatin1String("findDOMCookies"), argumentList);
    }

    inline QDBusReply<QStringList> findDomains()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("findDomains"), argumentList);
    }

    inline QDBusReply<QString> getDomainAdvice(const QString &url)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(url);
        return callWithArgumentList(QDBus::Block, QLatin1String("getDomainAdvice"), argumentList);
    }

    inline QDBusReply<void> reloadPolicy()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("reloadPolicy"), argumentList);
    }

    inline QDBusReply<void> setDomainAdvice(const QString &url, const QString &advice)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(url) << qVariantFromValue(advice);
        return callWithArgumentList(QDBus::Block, QLatin1String("setDomainAdvice"), argumentList);
    }

    inline QDBusReply<void> shutdown()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("shutdown"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace kde {
    typedef ::OrgKdeKCookieServerInterface KCookieServer;
  }
}
#endif
